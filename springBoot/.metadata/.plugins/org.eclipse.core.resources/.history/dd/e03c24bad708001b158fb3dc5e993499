package br.com.leovictor.financeiro.integrationTest;

import static org.assertj.core.api.Assertions.assertThat;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.BDDMockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.context.annotation.Import;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import br.com.leovictor.financeiro.domain.Categoria;
import br.com.leovictor.financeiro.domain.Lancamento;
import br.com.leovictor.financeiro.dto.LancamentoDTO;
import br.com.leovictor.financeiro.repository.LancamentoRepository;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@Import(br.com.leovictor.financeiro.integrationTest.AuthenticationUtil.class)
public class LancamentoControllerTest {
	@Autowired
	private TestRestTemplate testRestTemplate;

	@LocalServerPort
	private int port;

	@MockBean
	private LancamentoRepository lancamentoRepositoryMock;

	@Autowired
	private AuthenticationUtil util;

	private PageImpl<Lancamento> lancamentosAdmin = null;
	private PageImpl<Lancamento> lancamentosUsuario = null;

	@BeforeEach
	public void setUp() {
		util.ConfiguraMocks();
		lancamentosAdmin = new PageImpl<>(List.of(new Lancamento(1L, LocalDateTime.now(), "lançamento Admin",
				util.adminAutenticado, new Categoria(1L, "teste"), new BigDecimal(100.01))));
		lancamentosUsuario = new PageImpl<>(List.of(new Lancamento(2L, LocalDateTime.now(), "lançamento Usuario",
				util.usuarioAutenticado, new Categoria(1L, "teste"), new BigDecimal(200.00))));

		BDDMockito.when(lancamentoRepositoryMock.findByUsuarioId(ArgumentMatchers.eq(util.adminAutenticado.getId()),
				ArgumentMatchers.any(Pageable.class))).thenReturn(lancamentosAdmin);
		BDDMockito.when(lancamentoRepositoryMock.findByUsuarioId(ArgumentMatchers.eq(util.usuarioAutenticado.getId()),
				ArgumentMatchers.any(Pageable.class))).thenReturn(lancamentosUsuario);
	}

	@Test
	public void naoDeveListarLancamentosParaUsuarioNaoAutenticado() {
		ResponseEntity<?> responseEntity = testRestTemplate.exchange("/lancamentos", HttpMethod.GET, null, Void.class);

		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
		assertThat(responseEntity.getBody()).isNull();
	}

	@Test
	public void deveListarSomenteOsLancamentosParaUsuarioAutenticado() {
		HttpEntity<Void> httpEntity = util.createAuthenticatedJsonHttpEntity(null, true);
		ResponseEntity<PageableResponse<LancamentoDTO>> responseEntity = testRestTemplate.exchange("/lancamentos",
				HttpMethod.GET, httpEntity, new ParameterizedTypeReference<PageableResponse<LancamentoDTO>>() {
				});

		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
		assertThat(responseEntity.getBody()).isNotNull();
		assertThat(responseEntity.getBody().toList()).isNotEmpty();
		assertThat(responseEntity.getBody().toList().size()).isEqualTo(1);
		assertThat(responseEntity.getBody().toList().get(0).getId())
				.isEqualTo(lancamentosAdmin.toList().get(0).getId());
	}
}
