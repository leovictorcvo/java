package br.com.leovictor.financeiro.integrationTest;

import static org.assertj.core.api.Assertions.assertThat;

import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.BDDMockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import br.com.leovictor.financeiro.domain.CPF;
import br.com.leovictor.financeiro.domain.Categoria;
import br.com.leovictor.financeiro.domain.Perfil;
import br.com.leovictor.financeiro.domain.Usuario;
import br.com.leovictor.financeiro.dto.AtualizaCategoriaDTO;
import br.com.leovictor.financeiro.dto.CategoriaDto;
import br.com.leovictor.financeiro.repository.CategoriaRepository;
import br.com.leovictor.financeiro.repository.UsuarioRepository;
import br.com.leovictor.financeiro.service.AuthService;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class CategoriaControllerTest {
	@Autowired
	private TestRestTemplate testRestTemplate;
	
	@LocalServerPort
	private int port;
	
	@MockBean
	private CategoriaRepository categoriaRepositoryMock;
	
	@MockBean 
	private AuthService authService;
	
	private final Categoria categoriaParaSalvar = new Categoria("Categoria");
	private final Categoria categoriaSalva = new Categoria(1L, "Categoria");
	private final String categoriaInexistente = "Não Cadastrada";
	private final AtualizaCategoriaDTO atualizaCategoriaDTO = new AtualizaCategoriaDTO("Categoria");
	
	
	@BeforeEach
	public void setUp() throws URISyntaxException {
		PageImpl<Categoria> categoriaPage = new PageImpl<>(List.of(categoriaSalva));
		
		private final Usuario usuarioAutenticado = new Usuario(1L, "teste", new CPF("55761387085"), "teste@teste.com", "$2a$10$vtOst9bmafORf11rD3Hb8./7avk0.0O0UOWzJHBtawoGID.E1PIwm", List.of(new Perfil(1L, "ROLE_ADMIN")));
		BDDMockito.when(authService.loadUserByUsername(ArgumentMatchers.anyString())).thenReturn(usuarioAutenticado);
		BDDMockito.when(categoriaRepositoryMock.getOne(ArgumentMatchers.anyLong())).thenReturn(categoriaSalva);
		BDDMockito.when(categoriaRepositoryMock.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(categoriaPage);
		BDDMockito.when(categoriaRepositoryMock.findByNomeIgnoreCase(ArgumentMatchers.eq(categoriaSalva.getNome()), ArgumentMatchers.any(Pageable.class))).thenReturn(categoriaPage);
		BDDMockito.when(categoriaRepositoryMock.findByNomeIgnoreCase(ArgumentMatchers.eq(categoriaInexistente), ArgumentMatchers.any(Pageable.class))).thenReturn(null);
		BDDMockito.when(categoriaRepositoryMock.findById(ArgumentMatchers.eq(categoriaSalva.getId()))).thenReturn(Optional.of(categoriaSalva));
		BDDMockito.when(categoriaRepositoryMock.save(ArgumentMatchers.any(Categoria.class))).thenReturn(categoriaSalva);
		BDDMockito.doNothing().when(categoriaRepositoryMock).deleteById(ArgumentMatchers.anyLong());
	}
	
	@Test
	void deveRetornarAsCategoriasPaginadas() {
		ResponseEntity<PageableResponse<CategoriaDto>> responseEntity = testRestTemplate.exchange("/categorias", HttpMethod.GET, null, new ParameterizedTypeReference<PageableResponse<CategoriaDto>>() {});
		
		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
		assertThat(responseEntity.getBody()).isNotNull();
		assertThat(responseEntity.getBody().toList()).isNotEmpty();
		assertThat(responseEntity.getBody().toList().get(0).getNome()).isEqualTo(categoriaSalva.getNome());
	}
	
	@Test
	void deveFiltrarAsCategoriasPeloNomeERetornarAsEncontradasPaginadas() {
		ResponseEntity<PageableResponse<CategoriaDto>> responseEntity = testRestTemplate.exchange("/categorias?nomeCategoria="+categoriaSalva.getNome(), HttpMethod.GET, null, new ParameterizedTypeReference<PageableResponse<CategoriaDto>>() {});
		
		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
		assertThat(responseEntity.getBody()).isNotNull();
		assertThat(responseEntity.getBody().toList()).isNotEmpty();
		assertThat(responseEntity.getBody().toList().get(0).getNome()).isEqualTo(categoriaSalva.getNome());
	}

	@Test
	void deveRetornarNullCasoONomeDaCategoriaNãoSejaEncontradoAoFiltrar() {
		ResponseEntity<PageableResponse<CategoriaDto>> responseEntity = testRestTemplate.exchange("/categorias?nomeCategoria="+categoriaInexistente, HttpMethod.GET, null, new ParameterizedTypeReference<PageableResponse<CategoriaDto>>() {});
		
		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
		assertThat(responseEntity.getBody()).isNull();
	}
	
	@Test
	void deveEncontrarACategoriaPeloId() {
		ResponseEntity<CategoriaDto> responseEntity = testRestTemplate.exchange("/categorias/"+categoriaSalva.getId(), HttpMethod.GET, null, CategoriaDto.class);
		
		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
		assertThat(responseEntity.getBody()).isNotNull();
		assertThat(responseEntity.getBody().getNome()).isEqualTo(categoriaSalva.getNome());
	}
	
	@Test
	void deveRetornar404CasoIdNaoEstejaCadastrado() {
		ResponseEntity<CategoriaDto> responseEntity = testRestTemplate.exchange("/categorias/200", HttpMethod.GET, null, CategoriaDto.class);
		
		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
		assertThat(responseEntity.getBody()).isNull();
	}
	
	@Test
	void deveRetornarCategoriaAposSalvar() {
		ResponseEntity<CategoriaDto> responseEntity = testRestTemplate.withBasicAuth("teste@teste.com", "123456").exchange("/categorias", HttpMethod.POST, Util.createJsonHttpEntity(categoriaParaSalvar), CategoriaDto.class);
		
		System.out.println("*********************************************");
		System.out.println(responseEntity);
		System.out.println(responseEntity.getBody());
		System.out.println("*********************************************");
		assertThat(responseEntity).isNotNull();
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);
		assertThat(responseEntity.getBody()).isNotNull();
		assertThat(responseEntity.getBody().getId()).isEqualTo(categoriaSalva.getId());
		assertThat(responseEntity.getBody().getNome()).isEqualTo(categoriaSalva.getNome());
	}
}
