package br.com.leovictor.financeiro.controller;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.Optional;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.BDDMockito;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import br.com.leovictor.financeiro.domain.Categoria;
import br.com.leovictor.financeiro.dto.CategoriaDto;
import br.com.leovictor.financeiro.repository.CategoriaRepository;

@ExtendWith(SpringExtension.class)
class CategoriaControllerTest {
	@InjectMocks
	private CategoriaController categoriaController;
	
	@Mock
	private CategoriaRepository categoriaRepositoryMock;

	private final Categoria categoriaParaSalvar = new Categoria("Categoria");
	private final Categoria categoriaSalva = new Categoria(1L, "Categoria");
	private final String categoriaInexistente = "Não Cadastrada";
	
	@BeforeEach
	public  void setUp() {
		
		PageImpl<Categoria> categoriaPage = new PageImpl<>(List.of(categoriaSalva));
		
		BDDMockito.when(categoriaRepositoryMock.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(categoriaPage);
		BDDMockito.when(categoriaRepositoryMock.findByNomeIgnoreCase(ArgumentMatchers.eq(categoriaSalva.getNome()), ArgumentMatchers.any(Pageable.class))).thenReturn(categoriaPage);
		BDDMockito.when(categoriaRepositoryMock.findByNomeIgnoreCase(ArgumentMatchers.eq(categoriaInexistente), ArgumentMatchers.any(Pageable.class))).thenReturn(null);
		BDDMockito.when(categoriaRepositoryMock.findById(ArgumentMatchers.anyLong())).thenReturn(Optional.of(categoriaSalva));
		
	}
	
	@Test
	void deveListarTodasAsCategoriasPaginadas() {
		Page<CategoriaDto> page = categoriaController.listar(null, PageRequest.of(0, 5));
		
		Assertions.assertThat(page).isNotNull();
		Assertions.assertThat(page.toList()).isNotEmpty();
		Assertions.assertThat(page.toList().get(0).getNome()).isEqualTo(categoriaSalva.getNome());
	}

	@Test
	void deveFiltrarAsCategoriasPeloNomeERetornarAsEncontradasPaginadas() {
		Page<CategoriaDto> page = categoriaController.listar(categoriaSalva.getNome(), PageRequest.of(0, 5));
		
		Assertions.assertThat(page).isNotNull();
		Assertions.assertThat(page.toList()).isNotEmpty();
		Assertions.assertThat(page.toList().get(0).getNome()).isEqualTo(categoriaSalva.getNome());
	}
	
	@Test
	void deveRetornarNullCasoNãoEncontreONomeFiltrado() {
		Page<CategoriaDto> page = categoriaController.listar(categoriaInexistente, PageRequest.of(0, 5));
		
		Assertions.assertThat(page).isNull();
	}

	@Test
	void deveEncontrarACategoriaPeloId() {
		CategoriaDto categoria = categoriaController.detalhar(categoriaSalva.getId()).getBody();
		
		Assertions.assertThat(categoria).isNotNull();
		Assertions.assertThat(categoria.getNome()).isNotNull()();
		Assertions.assertThat(categoria.getNome()).isEqualTo(categoriaSalva.getNome());
	}
}
